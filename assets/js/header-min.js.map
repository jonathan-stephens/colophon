{"version":3,"names":["HeaderController","constructor","this","isNavOpen","isTransitioning","navToggle","document","getElementById","navPanel","navToggleText","body","openIcon","closeIcon","init","console","log","loadIcons","classList","add","setAttribute","addEventListener","e","preventDefault","toggleNav","key","closeNav","openResponse","fetch","text","closeResponse","error","warn","existingSvg","querySelector","outerHTML","openNav","style","overflow","remove","updateNavState","setTimeout","toString","toggle","textContent","updateIcon","svgElement","newIconHTML","tempDiv","createElement","innerHTML","newSvg","className","baseVal","replaceWith","readyState"],"sources":["header.js"],"sourcesContent":["class HeaderController {\n    constructor() {\n        this.isNavOpen = false;\n        this.isTransitioning = false;\n\n        // Get DOM elements\n        this.navToggle = document.getElementById('nav-toggle');\n        this.navPanel = document.getElementById('nav-panel');\n        this.navToggleText = document.getElementById('nav-toggle-text');\n        this.body = document.body;\n\n        // Store the original SVG content for switching\n        this.openIcon = null;\n        this.closeIcon = null;\n\n        this.init();\n    }\n\n    async init() {\n        console.log('HeaderController initializing...');\n        console.log('Nav toggle found:', !!this.navToggle);\n        console.log('Nav panel found:', !!this.navPanel);\n        console.log('Nav toggle text found:', !!this.navToggleText);\n\n        // Load both SVG icons\n        await this.loadIcons();\n\n        // Set initial collapsed state\n        if (this.navPanel) {\n            this.navPanel.classList.add('is-collapsed');\n            this.navPanel.setAttribute('aria-hidden', 'true');\n        }\n\n        // Add click listener\n        if (this.navToggle) {\n            this.navToggle.addEventListener('click', (e) => {\n                console.log('Nav toggle clicked!');\n                e.preventDefault();\n                this.toggleNav();\n            });\n        }\n\n        // Close panel on Escape key\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape' && this.isNavOpen) {\n                this.closeNav();\n            }\n        });\n\n        console.log('HeaderController initialized successfully');\n    }\n\n    async loadIcons() {\n        try {\n            console.log('Loading icons...');\n            const openResponse = await fetch('/assets/svg/icons/panel-right---to-open.svg');\n            this.openIcon = await openResponse.text();\n\n            const closeResponse = await fetch('/assets/svg/icons/panel-right---to-close.svg');\n            this.closeIcon = await closeResponse.text();\n\n            console.log('Icons loaded successfully');\n        } catch (error) {\n            console.warn('Could not load navigation icons:', error);\n            // Fallback - keep the existing icon\n            const existingSvg = this.navToggle && this.navToggle.querySelector('svg');\n            this.openIcon = existingSvg ? existingSvg.outerHTML : '';\n            this.closeIcon = this.openIcon; // Use same icon as fallback\n        }\n    }\n\n    toggleNav() {\n        console.log('toggleNav called, current state:', this.isNavOpen);\n\n        if (this.isTransitioning) {\n            console.log('Already transitioning, ignoring click');\n            return;\n        }\n\n        if (this.isNavOpen) {\n            this.closeNav();\n        } else {\n            this.openNav();\n        }\n    }\n\n    openNav() {\n        console.log('Opening nav...');\n\n        if (this.isTransitioning) return;\n\n        this.isNavOpen = true;\n        this.isTransitioning = true;\n\n        // Simple body scroll prevention\n        this.body.style.overflow = 'hidden';\n\n        // Remove collapsed class first\n        if (this.navPanel) {\n            this.navPanel.classList.remove('is-collapsed');\n            this.navPanel.classList.add('is-opening');\n        }\n\n        // Update nav state\n        this.updateNavState();\n\n        // Reset transitioning flag after animation\n        setTimeout(() => {\n            this.isTransitioning = false;\n            if (this.navPanel) {\n                this.navPanel.classList.remove('is-opening');\n                this.navPanel.classList.add('open');\n            }\n        }, 300); // Adjust timing based on your CSS transition duration\n    }\n\n    closeNav() {\n        console.log('Closing nav...');\n\n        if (!this.isNavOpen) return;\n        if (this.isTransitioning) return;\n\n        this.isNavOpen = false;\n        this.isTransitioning = true;\n\n        // Simple body scroll restoration\n        this.body.style.overflow = '';\n\n        // Remove opening and open classes, add closing class\n        if (this.navPanel) {\n            this.navPanel.classList.remove('is-opening', 'open');\n            this.navPanel.classList.add('is-closing');\n        }\n\n        // Update nav state\n        this.updateNavState();\n\n        // Reset transitioning flag after animation\n        setTimeout(() => {\n            this.isTransitioning = false;\n            if (this.navPanel) {\n                this.navPanel.classList.remove('is-closing');\n                this.navPanel.classList.add('is-collapsed');\n            }\n        }, 300); // Adjust timing based on your CSS transition duration\n    }\n\n    updateNavState() {\n        console.log('Updating nav state, isNavOpen:', this.isNavOpen);\n\n        // Update panel attributes\n        if (this.navPanel) {\n            this.navPanel.setAttribute('aria-hidden', (!this.isNavOpen).toString());\n        }\n\n        // Update toggle button\n        if (this.navToggle) {\n            this.navToggle.setAttribute('aria-expanded', this.isNavOpen.toString());\n            this.navToggle.classList.toggle('is-open', this.isNavOpen);\n        }\n\n        // Update toggle text\n        if (this.navToggleText) {\n            this.navToggleText.textContent = this.isNavOpen ? 'Close Navigation' : 'Open Navigation';\n        }\n\n        // Update the button icon\n        this.updateIcon();\n    }\n\n    updateIcon() {\n        console.log('Updating icon, isNavOpen:', this.isNavOpen);\n\n        if (!this.openIcon || !this.closeIcon) {\n            console.log('Icons not available');\n            return;\n        }\n\n        // Find the SVG element in the button\n        const svgElement = this.navToggle && this.navToggle.querySelector('svg');\n        if (!svgElement) {\n            console.log('No SVG element found');\n            return;\n        }\n\n        // Replace the SVG with the appropriate icon\n        const newIconHTML = this.isNavOpen ? this.closeIcon : this.openIcon;\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = newIconHTML;\n        const newSvg = tempDiv.querySelector('svg');\n\n        if (newSvg) {\n            // Copy classes from old SVG\n            if (svgElement.className.baseVal) {\n                newSvg.setAttribute('class', svgElement.className.baseVal);\n            }\n\n            svgElement.replaceWith(newSvg);\n            console.log('Icon updated successfully');\n        } else {\n            console.log('Failed to create new SVG');\n        }\n    }\n}\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        console.log('DOM loaded, initializing HeaderController');\n        new HeaderController();\n    });\n} else {\n    console.log('DOM already loaded, initializing HeaderController');\n    new HeaderController();\n}\n"],"mappings":"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","ignoreList":[]}