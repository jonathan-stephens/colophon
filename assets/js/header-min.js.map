{"version":3,"names":["HeaderController","constructor","this","isNavOpen","isTransitioning","scrollPosition","navToggle","document","getElementById","navPanel","navToggleText","body","html","documentElement","openIcon","closeIcon","isMobile","detectMobile","handleResize","debounce","bind","init","test","navigator","userAgent","window","innerWidth","func","wait","timeout","args","clearTimeout","setTimeout","loadIcons","classList","add","setAttribute","requestAnimationFrame","addEventListener","e","preventDefault","toggleNav","target","propertyName","handleTransitionEnd","key","closeNav","contains","closest","hidden","preloadAnimations","style","transform","openResponse","fetch","text","closeResponse","error","console","warn","existingSvg","querySelector","outerHTML","openNav","pageYOffset","scrollTop","preventBodyScroll","remove","offsetHeight","updateNavState","restoreBodyScroll","position","top","width","left","right","scrollPos","scrollTo","toString","textContent","updateIcon","toggle","manageFocus","svgElement","newIconHTML","tempDiv","createElement","innerHTML","newSvg","className","baseVal","replaceWith","firstNavLink","focus","readyState"],"sources":["header.js"],"sourcesContent":["class HeaderController {\n    constructor() {\n        this.isNavOpen = false;\n        this.isTransitioning = false;\n        this.scrollPosition = 0;\n\n        // Get DOM elements\n        this.navToggle = document.getElementById('nav-toggle');\n        this.navPanel = document.getElementById('nav-panel');\n        this.navToggleText = document.getElementById('nav-toggle-text');\n        this.body = document.body;\n        this.html = document.documentElement;\n\n        // Store the original SVG content for switching\n        this.openIcon = null;\n        this.closeIcon = null;\n\n        // Mobile detection\n        this.isMobile = this.detectMobile();\n\n        // Debounce resize handler\n        this.handleResize = this.debounce(this.handleResize.bind(this), 150);\n\n        this.init();\n    }\n\n    detectMobile() {\n        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||\n               window.innerWidth <= 768;\n    }\n\n    debounce(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout);\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n\n    async init() {\n        // Load both SVG icons\n        await this.loadIcons();\n\n        // Set initial collapsed state FIRST, before any transitions\n        this.navPanel.classList.add('is-collapsed');\n        this.navPanel.setAttribute('aria-hidden', 'true');\n\n        // Enable transitions after DOM is fully ready\n        requestAnimationFrame(() => {\n          this.navPanel.classList.add('transitions-enabled');\n        });\n\n        // Check if elements exist before adding listeners\n        if (this.navToggle) {\n            this.navToggle.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.toggleNav();\n            });\n        }\n\n        // Enhanced transition handling\n        if (this.navPanel) {\n            this.navPanel.addEventListener('transitionend', (e) => {\n                // Only handle the main panel transition, not child elements\n                if (e.target === this.navPanel && e.propertyName === 'transform') {\n                    this.handleTransitionEnd();\n                }\n            });\n        }\n\n        // Close panel on Escape key\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape' && this.isNavOpen) {\n                this.closeNav();\n            }\n        });\n\n        // Enhanced outside click handling\n        document.addEventListener('click', (e) => {\n            if (this.isNavOpen && !this.isTransitioning) {\n                // Check if click is outside nav panel and header\n                if (!this.navPanel.contains(e.target) &&\n                    !e.target.closest('.site-header')) {\n                    this.closeNav();\n                }\n            }\n        });\n\n        // Handle window resize\n        window.addEventListener('resize', this.handleResize);\n\n        // Handle orientation change on mobile\n        if (this.isMobile) {\n            window.addEventListener('orientationchange', () => {\n                setTimeout(() => {\n                    this.handleResize();\n                }, 100);\n            });\n        }\n\n        // Handle page visibility change to prevent issues with mobile browsers\n        document.addEventListener('visibilitychange', () => {\n            if (document.hidden && this.isNavOpen) {\n                this.closeNav();\n            }\n        });\n\n        // Preload animations on mobile\n        if (this.isMobile) {\n            this.preloadAnimations();\n        }\n    }\n\n    preloadAnimations() {\n        // Force hardware acceleration by triggering a transform\n        requestAnimationFrame(() => {\n            this.navPanel.style.transform = 'translateX(-100%) translateZ(0)';\n        });\n    }\n\n    handleResize() {\n        // Update mobile detection\n        this.isMobile = this.detectMobile();\n\n        // Close nav if open and switching to desktop\n        if (this.isNavOpen && !this.isMobile) {\n            this.closeNav();\n        }\n    }\n\n    async loadIcons() {\n        try {\n            // FIXED: Load the correct icon files\n            const openResponse = await fetch('/assets/svg/icons/panel-right---to-open.svg');\n            this.openIcon = await openResponse.text();\n\n            const closeResponse = await fetch('/assets/svg/icons/panel-right---to-close.svg');\n            this.closeIcon = await closeResponse.text();\n        } catch (error) {\n            console.warn('Could not load navigation icons:', error);\n            // Fallback - keep the existing icon\n            const existingSvg = this.navToggle.querySelector('svg');\n            this.openIcon = existingSvg ? existingSvg.outerHTML : '';\n            this.closeIcon = this.openIcon; // Use same icon as fallback\n        }\n    }\n\n    toggleNav() {\n        if (this.isTransitioning) return; // Prevent multiple clicks during transition\n\n        if (this.isNavOpen) {\n            this.closeNav();\n        } else {\n            this.openNav();\n        }\n    }\n\n    openNav() {\n        if (this.isTransitioning) return;\n\n        this.isNavOpen = true;\n        this.isTransitioning = true;\n\n        // Store current scroll position and prevent body scroll\n        this.scrollPosition = window.pageYOffset || document.documentElement.scrollTop;\n        this.preventBodyScroll();\n\n        // Remove collapsed class first\n        this.navPanel.classList.remove('is-collapsed');\n\n        // Force a reflow to ensure the class change is applied\n        this.navPanel.offsetHeight;\n\n        // Then add opening class for animation\n        this.navPanel.classList.add('is-opening');\n\n        // Update nav state\n        this.updateNavState();\n    }\n\n    closeNav() {\n        if (!this.isNavOpen) return;\n        if (this.isTransitioning) return;\n\n        this.isNavOpen = false;\n        this.isTransitioning = true;\n\n        // Remove opening and open classes, add closing class\n        this.navPanel.classList.remove('is-opening', 'open');\n        this.navPanel.classList.add('is-closing');\n\n        // Update nav state\n        this.updateNavState();\n\n        // FIXED: Restore body scroll immediately, don't wait for transition\n        this.restoreBodyScroll();\n    }\n\n    preventBodyScroll() {\n        // Enhanced body scroll prevention\n        this.body.classList.add('nav-open');\n\n        // Store current scroll position more reliably\n        this.scrollPosition = window.pageYOffset || document.documentElement.scrollTop || this.body.scrollTop || 0;\n\n        if (this.isMobile) {\n            // Additional mobile-specific scroll prevention\n            this.body.style.position = 'fixed';\n            this.body.style.top = `-${this.scrollPosition}px`;\n            this.body.style.width = '100%';\n            this.body.style.left = '0';\n            this.body.style.right = '0';\n        }\n    }\n\n    restoreBodyScroll() {\n        // FIXED: More robust body scroll restoration\n        this.body.classList.remove('nav-open');\n\n        if (this.isMobile) {\n            // Store the scroll position before clearing styles\n            const scrollPos = this.scrollPosition;\n\n            // Clear all the fixed positioning styles\n            this.body.style.position = '';\n            this.body.style.top = '';\n            this.body.style.width = '';\n            this.body.style.left = '';\n            this.body.style.right = '';\n\n            // Restore scroll position with a small delay to ensure DOM is ready\n            requestAnimationFrame(() => {\n                window.scrollTo(0, scrollPos);\n                // Backup restoration method\n                document.documentElement.scrollTop = scrollPos;\n                this.body.scrollTop = scrollPos;\n            });\n        }\n    }\n\n    handleTransitionEnd() {\n        this.isTransitioning = false;\n\n        if (this.isNavOpen) {\n            // Transition to open state complete\n            this.navPanel.classList.remove('is-opening');\n            this.navPanel.classList.add('open');\n        } else {\n            // Transition to closed state complete - clean up all classes\n            this.navPanel.classList.remove('is-closing', 'open');\n            this.navPanel.classList.add('is-collapsed');\n        }\n    }\n\n    updateNavState() {\n        // Update panel classes and attributes\n        this.navPanel.setAttribute('aria-hidden', (!this.isNavOpen).toString());\n\n        // Update toggle button\n        this.navToggle.setAttribute('aria-expanded', this.isNavOpen.toString());\n        this.navToggleText.textContent = this.isNavOpen ? 'Close Navigation' : 'Open Navigation';\n\n        // Update the button icon\n        this.updateIcon();\n\n        // Update the button class for styling\n        this.navToggle.classList.toggle('is-open', this.isNavOpen);\n\n        // Manage focus\n        if (this.isNavOpen) {\n            this.manageFocus();\n        }\n    }\n\n    updateIcon() {\n        if (!this.openIcon || !this.closeIcon) return;\n\n        // Find the SVG element in the button\n        const svgElement = this.navToggle.querySelector('svg');\n        if (!svgElement) return;\n\n        // Replace the SVG with the appropriate icon\n        const newIconHTML = this.isNavOpen ? this.closeIcon : this.openIcon;\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = newIconHTML;\n        const newSvg = tempDiv.querySelector('svg');\n\n        if (newSvg) {\n            // Copy classes from old SVG using setAttribute instead of className\n            if (svgElement.className.baseVal) {\n                newSvg.setAttribute('class', svgElement.className.baseVal);\n            }\n\n            svgElement.replaceWith(newSvg);\n        }\n    }\n    manageFocus() {\n        if (this.isNavOpen) {\n            // Use a small delay to ensure the panel is visible\n            setTimeout(() => {\n                const firstNavLink = this.navPanel.querySelector('.nav-link');\n                if (firstNavLink) {\n                    firstNavLink.focus();\n                }\n            }, 100);\n        }\n    }\n}\n\n// Enhanced initialization with better loading handling\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        new HeaderController();\n    });\n} else {\n    // DOM is already loaded\n    new HeaderController();\n}\n"],"mappings":"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","ignoreList":[]}