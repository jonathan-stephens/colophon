{"version":3,"names":["HeaderController","constructor","this","isNavOpen","isTransitioning","navToggle","document","getElementById","navPanel","navToggleText","openIcon","closeIcon","init","loadIcons","addEventListener","toggleNav","e","target","handleTransitionEnd","key","closeNav","contains","closest","classList","add","openResponse","fetch","text","closeResponse","error","console","warn","querySelector","outerHTML","openNav","remove","offsetHeight","updateNavState","toggle","setAttribute","toString","textContent","updateIcon","body","manageFocus","svgElement","newIconHTML","tempDiv","createElement","innerHTML","newSvg","replaceWith","firstNavLink","focus","headerExports","requireHeader","header","getDefaultExportFromCjs"],"sources":["header.js","header.js?commonjs-entry"],"sourcesContent":["class HeaderController {\n    constructor() {\n        this.isNavOpen = false;\n        this.isTransitioning = false;\n        // Get DOM elements\n        this.navToggle = document.getElementById('nav-toggle');\n        this.navPanel = document.getElementById('nav-panel');\n        this.navToggleText = document.getElementById('nav-toggle-text');\n\n        // Store the original SVG content for switching\n        this.openIcon = null;\n        this.closeIcon = null;\n\n        this.init();\n    }\n\n    async init() {\n        // Load both SVG icons\n        await this.loadIcons();\n\n        // Check if elements exist before adding listeners\n        if (this.navToggle) {\n            this.navToggle.addEventListener('click', () => this.toggleNav());\n        }\n\n        // Listen for transition end to update classes\n        if (this.navPanel) {\n            this.navPanel.addEventListener('transitionend', (e) => {\n                // Only handle the main panel transition, not child elements\n                if (e.target === this.navPanel) {\n                    this.handleTransitionEnd();\n                }\n            });\n        }\n\n        // Close panel on Escape key\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                this.closeNav();\n            }\n        });\n\n        // Close panel on outside click (anywhere except nav panel and header)\n        document.addEventListener('click', (e) => {\n            if (this.isNavOpen && !this.isTransitioning) {\n                // Check if click is outside nav panel and header\n                if (!this.navPanel.contains(e.target) &&\n                    !e.target.closest('.site-header')) {\n                    this.closeNav();\n                }\n            }\n        });\n\n        // Set initial collapsed state\n        this.navPanel.classList.add('is-collapsed');\n    }\n\n    async loadIcons() {\n        try {\n            // Load the open icon (current one)\n            const openResponse = await fetch('/assets/svg/icons/panel-left---to-open.svg');\n            this.openIcon = await openResponse.text();\n\n            // Load the close icon\n            const closeResponse = await fetch('/assets/svg/icons/panel-left---to-close.svg');\n            this.closeIcon = await closeResponse.text();\n        } catch (error) {\n            console.warn('Could not load navigation icons:', error);\n            // Fallback - keep the existing icon\n            this.openIcon = this.navToggle.querySelector('svg')?.outerHTML || '';\n            this.closeIcon = this.openIcon; // Use same icon as fallback\n        }\n    }\n\n    toggleNav() {\n        if (this.isTransitioning) return; // Prevent multiple clicks during transition\n\n        if (this.isNavOpen) {\n            this.closeNav();\n        } else {\n            this.openNav();\n        }\n    }\n\n    openNav() {\n        if (this.isTransitioning) return;\n\n        this.isNavOpen = true;\n        this.isTransitioning = true;\n\n        // Remove collapsed class and add opening class\n        this.navPanel.classList.remove('is-collapsed');\n        this.navPanel.classList.add('is-opening');\n\n        // Force a reflow to ensure the class change is applied\n        this.navPanel.offsetHeight;\n\n        this.updateNavState();\n    }\n\n    closeNav() {\n        if (this.isTransitioning || !this.isNavOpen) return;\n\n        this.isNavOpen = false;\n        this.isTransitioning = true;\n\n        // Remove opening class and add closing class\n        this.navPanel.classList.remove('is-opening');\n        this.navPanel.classList.add('is-closing');\n\n        // Force a reflow to ensure the class change is applied\n        this.navPanel.offsetHeight;\n\n        this.updateNavState();\n    }\n\n    handleTransitionEnd() {\n        this.isTransitioning = false;\n\n        if (this.isNavOpen) {\n            // Transition to open state complete\n            this.navPanel.classList.remove('is-opening');\n        } else {\n            // Transition to closed state complete - clean up all classes\n            this.navPanel.classList.remove('is-closing');\n            this.navPanel.classList.add('is-collapsed');\n        }\n    }\n\n    updateNavState() {\n        // Update panel classes and attributes\n        this.navPanel.classList.toggle('open', this.isNavOpen);\n        this.navPanel.setAttribute('aria-hidden', (!this.isNavOpen).toString());\n\n        // Update toggle button\n        this.navToggle.setAttribute('aria-expanded', this.isNavOpen.toString());\n        this.navToggleText.textContent = this.isNavOpen ? 'Close Navigation' : 'Open Navigation';\n\n        // Update the button icon\n        this.updateIcon();\n\n        // Update the button class for styling\n        this.navToggle.classList.toggle('is-open', this.isNavOpen);\n\n        // Add state classes to body for global styling control\n        document.body.classList.toggle('nav-open', this.isNavOpen);\n\n        this.manageFocus();\n    }\n\n    updateIcon() {\n        if (!this.openIcon || !this.closeIcon) return;\n\n        // Find the SVG element in the button\n        const svgElement = this.navToggle.querySelector('svg');\n        if (!svgElement) return;\n\n        // Replace the SVG with the appropriate icon\n        const newIconHTML = this.isNavOpen ? this.closeIcon : this.openIcon;\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = newIconHTML;\n        const newSvg = tempDiv.querySelector('svg');\n\n        if (newSvg) {\n            svgElement.replaceWith(newSvg);\n        }\n    }\n\n    manageFocus() {\n        if (this.isNavOpen) {\n            // Focus first navigation link\n            const firstNavLink = this.navPanel.querySelector('.nav-link');\n            if (firstNavLink) {\n                firstNavLink.focus();\n            }\n        }\n    }\n}\n\n// Initialize when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    new HeaderController();\n});\n","import { getDefaultExportFromCjs } from \"\u0000commonjsHelpers.js\";\nimport { __require as requireHeader } from \"/Users/jonathan/Desktop/Github/js-us-a2/assets/js/header.js\";\nvar headerExports = requireHeader();\nexport { headerExports as __moduleExports };\nexport default /*@__PURE__*/getDefaultExportFromCjs(headerExports);"],"mappings":"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","ignoreList":[]}