{"version":3,"names":["saved","localStorage","getItem","systemDark","window","matchMedia","matches","document","documentElement","setAttribute","ThemeManager","constructor","this","toggle","querySelector","statusElement","toggleContainer","htmlElement","init","updateToggleState","addEventListener","handleToggle","setupSystemThemeListener","style","visibility","console","warn","getCurrentTheme","getAttribute","newTheme","checked","setTheme","theme","removeAttribute","setItem","isDark","toString","textContent","mediaQuery","handleSystemChange","e","addListener"],"sources":["theme-picker.js"],"sourcesContent":["// FOUC prevention - inline this in your <head>\n       (function() {\n           const saved = localStorage.getItem('theme');\n           const systemDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n           const isDark = saved === 'dark' || (!saved && systemDark);\n           if (isDark) {\n               document.documentElement.setAttribute('data-theme', 'dark');\n           }\n       })();\n\n       // Lightweight Theme Manager\n       class ThemeManager {\n           constructor() {\n               this.toggle = document.querySelector('.js-mode-toggle');\n               this.statusElement = document.querySelector('.js-mode-status');\n               this.toggleContainer = document.querySelector('.color-mode-toggle');\n               this.htmlElement = document.documentElement;\n\n               this.init();\n           }\n\n           init() {\n               if (!this.toggle) {\n                   console.warn('Theme toggle not found');\n                   return;\n               }\n\n               // Set initial state based on current theme\n               this.updateToggleState();\n\n               // Single event listener for all interactions\n               this.toggle.addEventListener('change', () => this.handleToggle());\n\n               // Listen for system theme changes (only if no saved preference)\n               this.setupSystemThemeListener();\n\n               // Show toggle after setup\n               if (this.toggleContainer) {\n                   this.toggleContainer.style.visibility = 'visible';\n               }\n           }\n\n           getCurrentTheme() {\n               return this.htmlElement.getAttribute('data-theme') === 'dark' ? 'dark' : 'light';\n           }\n\n           handleToggle() {\n               const newTheme = this.toggle.checked ? 'dark' : 'light';\n               this.setTheme(newTheme);\n           }\n\n           setTheme(theme) {\n               const isDark = theme === 'dark';\n\n               // Update DOM\n               if (isDark) {\n                   this.htmlElement.setAttribute('data-theme', 'dark');\n               } else {\n                   this.htmlElement.removeAttribute('data-theme');\n               }\n\n               // Save preference\n               localStorage.setItem('theme', theme);\n\n               // Update toggle state\n               this.updateToggleState();\n           }\n\n           updateToggleState() {\n               const isDark = this.getCurrentTheme() === 'dark';\n\n               // Update checkbox\n               this.toggle.checked = isDark;\n               this.toggle.setAttribute('aria-checked', isDark.toString());\n\n               // Update status for screen readers\n               if (this.statusElement) {\n                   this.statusElement.textContent = `Color mode is currently ${isDark ? 'dark' : 'light'}`;\n               }\n           }\n\n           setupSystemThemeListener() {\n               const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n\n               const handleSystemChange = (e) => {\n                   // Only apply system theme if user hasn't set a preference\n                   if (!localStorage.getItem('theme')) {\n                       this.setTheme(e.matches ? 'dark' : 'light');\n                   }\n               };\n\n               // Use modern addEventListener with fallback\n               if (mediaQuery.addEventListener) {\n                   mediaQuery.addEventListener('change', handleSystemChange);\n               } else {\n                   mediaQuery.addListener(handleSystemChange);\n               }\n           }\n       }\n\n       // Initialize when DOM is ready\n       document.addEventListener('DOMContentLoaded', () => {\n           new ThemeManager();\n       });\n"],"mappings":"CACO,WACI,MAAMA,EAAQC,aAAaC,QAAQ,SAC7BC,EAAaC,OAAOC,WAAW,gCAAgCC,SAC5C,SAAVN,IAAsBA,GAASG,IAE1CI,SAASC,gBAAgBC,aAAa,aAAc,OAE3D,CAPD,GAUA,MAAMC,aACF,WAAAC,GACIC,KAAKC,OAASN,SAASO,cAAc,mBACrCF,KAAKG,cAAgBR,SAASO,cAAc,mBAC5CF,KAAKI,gBAAkBT,SAASO,cAAc,sBAC9CF,KAAKK,YAAcV,SAASC,gBAE5BI,KAAKM,MACpB,CAEW,IAAAA,GACSN,KAAKC,QAMVD,KAAKO,oBAGLP,KAAKC,OAAOO,iBAAiB,UAAU,IAAMR,KAAKS,iBAGlDT,KAAKU,2BAGDV,KAAKI,kBACLJ,KAAKI,gBAAgBO,MAAMC,WAAa,YAfxCC,QAAQC,KAAK,yBAiBhC,CAEW,eAAAC,GACI,MAAuD,SAAhDf,KAAKK,YAAYW,aAAa,cAA2B,OAAS,OACxF,CAEW,YAAAP,GACI,MAAMQ,EAAWjB,KAAKC,OAAOiB,QAAU,OAAS,QAChDlB,KAAKmB,SAASF,EAC7B,CAEW,QAAAE,CAASC,GACoB,SAAVA,EAIXpB,KAAKK,YAAYR,aAAa,aAAc,QAE5CG,KAAKK,YAAYgB,gBAAgB,cAIrChC,aAAaiC,QAAQ,QAASF,GAG9BpB,KAAKO,mBACpB,CAEW,iBAAAA,GACI,MAAMgB,EAAoC,SAA3BvB,KAAKe,kBAGpBf,KAAKC,OAAOiB,QAAUK,EACtBvB,KAAKC,OAAOJ,aAAa,eAAgB0B,EAAOC,YAG5CxB,KAAKG,gBACLH,KAAKG,cAAcsB,YAAc,4BAA2BF,EAAS,OAAS,SAEjG,CAEW,wBAAAb,GACI,MAAMgB,EAAalC,OAAOC,WAAW,gCAE/BkC,EAAsBC,IAEnBvC,aAAaC,QAAQ,UACtBU,KAAKmB,SAASS,EAAElC,QAAU,OAAS,QAC1D,EAImBgC,EAAWlB,iBACXkB,EAAWlB,iBAAiB,SAAUmB,GAEtCD,EAAWG,YAAYF,EAE1C,EAIOhC,SAASa,iBAAiB,oBAAoB,KAC1C,IAAIV,YAAc","ignoreList":[]}