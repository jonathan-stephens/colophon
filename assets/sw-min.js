const CACHE_NAME="bookmarks-pwa-v3",urlsToCache=["/","/links"];self.addEventListener("install",(e=>{console.log("Service Worker: Installing..."),e.waitUntil(caches.open(CACHE_NAME).then((e=>(console.log("Service Worker: Opened cache"),e.addAll(urlsToCache)))).catch((e=>{console.error("Service Worker: Cache install error:",e)})).then((()=>(console.log("Service Worker: Skip waiting"),self.skipWaiting()))))})),self.addEventListener("activate",(e=>{console.log("Service Worker: Activating...");const r=[CACHE_NAME];e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>{if(-1===r.indexOf(e))return console.log("Service Worker: Deleting old cache:",e),caches.delete(e)}))))).then((()=>(console.log("Service Worker: Claiming clients"),self.clients.claim()))))})),self.addEventListener("fetch",(e=>{const{request:r}=e,o=new URL(r.url);return"POST"===r.method&&"/share"===o.pathname?(console.log("Service Worker: 🎯 Share POST request detected"),console.log("Service Worker: Full URL:",r.url),console.log("Service Worker: Request headers:",[...r.headers.entries()]),void e.respondWith((async()=>{try{const e=await r.formData(),t=e.get("title")||"",c=e.get("text")||"",s=e.get("url")||"";console.log("Service Worker: 📦 Share data extracted:",{title:t,text:c,url:s});const l=new URLSearchParams;s&&l.set("url",s),t&&l.set("title",t),c&&l.set("text",c);const n=`${o.origin}/share?${l.toString()}`;console.log("Service Worker: ➡️ Full redirect URL:",n);const a=Response.redirect(n,303);return console.log("Service Worker: ✅ Redirect response created"),a}catch(e){return console.error("Service Worker: ❌ Error processing share:",e),console.error("Service Worker: Error stack:",e.stack),Response.redirect(`${o.origin}/share`,303)}})())):"/share"===o.pathname||o.pathname.startsWith("/api/")?(console.log("Service Worker: 🌐 Network-only for:",r.url),void e.respondWith(fetch(r))):void e.respondWith(fetch(r).then((e=>{if(console.log("Service Worker: 🌐 Network response for:",r.url),!e||200!==e.status||"GET"!==r.method)return e;if("basic"===e.type){const o=e.clone();caches.open(CACHE_NAME).then((e=>{e.put(r,o)}))}return e})).catch((e=>(console.log("Service Worker: ⚠️ Network failed, trying cache for:",r.url),caches.match(r).then((o=>{if(o)return console.log("Service Worker: 📦 Serving from cache:",r.url),o;throw console.error("Service Worker: ❌ No cache available for:",r.url),e}))))))})),self.addEventListener("message",(e=>{console.log("Service Worker: Message received:",e.data),e.data&&"SKIP_WAITING"===e.data.type&&self.skipWaiting(),e.data&&"CLEAR_CACHE"===e.data.type&&caches.delete(CACHE_NAME).then((()=>{console.log("Service Worker: Cache cleared"),e.ports[0].postMessage({cleared:!0})}))}));