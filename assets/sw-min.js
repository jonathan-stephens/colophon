const CACHE_NAME="bookmarks-pwa-v2",urlsToCache=["/","/share","/links"];self.addEventListener("install",(e=>{console.log("Service Worker: Installing..."),e.waitUntil(caches.open(CACHE_NAME).then((e=>(console.log("Service Worker: Opened cache"),e.addAll(urlsToCache)))).catch((e=>{console.error("Service Worker: Cache install error:",e)})).then((()=>(console.log("Service Worker: Skip waiting"),self.skipWaiting()))))})),self.addEventListener("activate",(e=>{console.log("Service Worker: Activating...");const r=[CACHE_NAME];e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>{if(-1===r.indexOf(e))return console.log("Service Worker: Deleting old cache:",e),caches.delete(e)}))))).then((()=>(console.log("Service Worker: Claiming clients"),self.clients.claim()))))})),self.addEventListener("fetch",(e=>{const{request:r}=e,t=new URL(r.url);if("POST"===r.method&&"/share"===t.pathname)return console.log("Service Worker: 🎯 Share POST request detected"),void e.respondWith((async()=>{try{const e=await r.formData(),t=e.get("title")||"",o=e.get("text")||"",c=e.get("url")||"";console.log("Service Worker: 📦 Share data:",{title:t,text:o,url:c});const s=new URLSearchParams;c&&s.set("url",c),t&&s.set("title",t),o&&s.set("text",o);const n=`/share?${s.toString()}`;return console.log("Service Worker: ➡️ Redirecting to:",n),Response.redirect(n,303)}catch(e){return console.error("Service Worker: ❌ Error processing share:",e),Response.redirect("/share",303)}})());e.respondWith(caches.match(r).then((e=>{if(e)return console.log("Service Worker: 📦 Serving from cache:",r.url),e;console.log("Service Worker: 🌐 Fetching from network:",r.url);const t=r.clone();return fetch(t).then((e=>{if(!e||200!==e.status||"basic"!==e.type)return e;if("GET"===r.method){const t=e.clone();caches.open(CACHE_NAME).then((e=>{e.put(r,t)}))}return e})).catch((e=>{throw console.error("Service Worker: Fetch failed:",e),e}))})))})),self.addEventListener("message",(e=>{console.log("Service Worker: Message received:",e.data),e.data&&"SKIP_WAITING"===e.data.type&&self.skipWaiting(),e.data&&"CLEAR_CACHE"===e.data.type&&caches.delete(CACHE_NAME).then((()=>{console.log("Service Worker: Cache cleared"),e.ports[0].postMessage({cleared:!0})}))}));