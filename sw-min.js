const CACHE_NAME="bookmarks-pwa-v4",urlsToCache=["/","/share"];self.addEventListener("install",(e=>{console.log("🔧 Service Worker: Installing v4..."),e.waitUntil(caches.open(CACHE_NAME).then((e=>(console.log("✅ Service Worker: Opened cache"),e.addAll(urlsToCache)))).catch((e=>{console.error("❌ Service Worker: Cache install error:",e)})).then((()=>(console.log("⏭️ Service Worker: Skip waiting"),self.skipWaiting()))))})),self.addEventListener("activate",(e=>{console.log("🚀 Service Worker: Activating v4...");const o=[CACHE_NAME];e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>{if(-1===o.indexOf(e))return console.log("🗑️ Service Worker: Deleting old cache:",e),caches.delete(e)}))))).then((()=>(console.log("👑 Service Worker: Claiming clients"),self.clients.claim()))))})),self.addEventListener("fetch",(e=>{const{request:o}=e,t=new URL(o.url);return console.log(`📡 SW Fetch: ${o.method} ${t.pathname}`),"POST"===o.method&&"/share"===t.pathname?(console.log("🎯 SHARE TARGET DETECTED!"),console.log("🎯 Full URL:",o.url),console.log("🎯 Origin:",t.origin),console.log("🎯 Pathname:",t.pathname),void e.respondWith((async()=>{try{console.log("📦 Extracting form data...");const e=await o.clone().formData(),r=e.get("url")||"",a=e.get("title")||"",s=e.get("text")||"";console.log("📦 Share data extracted:"),console.log("  - URL:",r),console.log("  - Title:",a),console.log("  - Text:",s);const n=new URLSearchParams;r&&n.set("url",r),a&&n.set("title",a),s&&n.set("text",s);const c=`${t.origin}/share?${n.toString()}`;console.log("➡️ Redirecting to:",c);const l=Response.redirect(c,303);return console.log("✅ Redirect response created"),l}catch(e){return console.error("❌ Error processing share:",e),console.error("❌ Error stack:",e.stack),Response.redirect(`${t.origin}/share`,303)}})())):"/share"===t.pathname?(console.log("🌐 GET /share - Network only"),void e.respondWith(fetch(o).catch((e=>(console.error("❌ Network failed for /share:",e),new Response("Offline - cannot load share page",{status:503,statusText:"Service Unavailable"})))))):t.pathname.startsWith("/api/")?(console.log("🌐 API call - Network only:",t.pathname),void e.respondWith(fetch(o))):void e.respondWith(fetch(o).then((e=>{if(console.log("🌐 Network response for:",t.pathname),!e||200!==e.status||"GET"!==o.method)return e;if("basic"===e.type){const t=e.clone();caches.open(CACHE_NAME).then((e=>{e.put(o,t)}))}return e})).catch((e=>(console.log("⚠️ Network failed, trying cache for:",t.pathname),caches.match(o).then((o=>{if(o)return console.log("📦 Serving from cache:",t.pathname),o;throw console.error("❌ No cache available for:",t.pathname),e}))))))})),self.addEventListener("message",(e=>{console.log("💬 Service Worker: Message received:",e.data),e.data&&"SKIP_WAITING"===e.data.type&&self.skipWaiting(),e.data&&"CLEAR_CACHE"===e.data.type&&caches.delete(CACHE_NAME).then((()=>{console.log("🗑️ Service Worker: Cache cleared"),e.ports[0].postMessage({cleared:!0})})),e.data&&"CHECK_STATUS"===e.data.type&&e.ports[0].postMessage({active:!0,version:CACHE_NAME,scope:self.registration.scope})})),console.log("✅ Service Worker v4 script loaded");